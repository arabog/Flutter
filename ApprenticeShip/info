Application ID: a87aa4cc

Application Keys:
dab715fcf9c38c9a93f4fd0256fface8

flutter create recipes

cd recipes
flutter run

flutter clean

for Gradle task 'assembleDebug'... issue at startup:
flutter doctor --android-licenses

https://www.raywenderlich.com/books/flutter-apprentice/v2.0/chapters/6-interactive-widgets

https://www.raywenderlich.com/books/flutter-apprentice/v2.0/chapters/5-scrollable-widgets

https://forums.raywenderlich.com/c/books/flutter-apprentice

Adding a package dependency to an app
From the terminal: Run flutter pub get .

try:

flutter upgrade
then:

flutter run -v

Every widget’s build() method takes a BuildContext
as an argument. The build context tells you where
you are in the tree of widgets. You can access the
element for any widget through the BuildContext

Column and Row widgets are like ListView but without the scroll view.

The main axis always corresponds to the scroll direction!

If your scroll direction is horizontal, you can think of this(main axis) as a Row. The main axis represents the horizontal direction

If your scroll direction is vertical, you can think of it(main axis) as a Column. The main axis represents the vertical direction

Grid delegates help figure out the spacing and the number of columns to use to lay out the children in a GridView.

Convert Stateless to Stateful Widget:
do ds in adroid studio
Open author_card.dart and right-click on AuthorCard.
Then click Show Context Actions from the menu that pops up:

Note: Remember that the purpose of a barrel file is to group common Dart files together. This allows you to group classes that are commonly used together so you only have to import a single file — in this case, models.dart.

Tip: You should only wrap a Consumer around widgets that need it. For example, wrapping a consumer widget at the top level would force it to rebuild the entire tree!

A deep link is a URL that navigates to a specific destination in your mobile app. You
can think of deep links like a URL address you enter into a web browser to go to a
specific page of a website rather than the home page.

For deep links to work, you need to do two key things: convert a URL to an app state
and convert an app state to a URL

navigation state is just a user-defined data type. It
converts a URL string into a proper data type.

AppLink is the intermediary object between a URL string and your app state.

Converting a URL to an app state
When the user enters a new URL on the web or triggers a deep link on mobile,
RouteInformationProvider notifies RouteInformationParser that there’s a new
route

Deep linking to the Home screen:
Enter the following in your terminal:
xcrun simctl openurl booted 'fooderlich://raywenderlich.com/
home?tab=1'

Deep linking to the Profile screen:
xcrun simctl openurl booted 'fooderlich://raywenderlich.com/
profile'

Deep linking to create a new item:
xcrun simctl openurl booted 'fooderlich://raywenderlich.com/
item'

chapter 9
• cached_network_image: Download and cache the images you’ll use in the app.
• flutter_slidable: Build a widget that lets the user slide a card left and right to
perform different actions, like deleting a saved recipe.
• flutter_svg: Load SVG images without the need to use a program to convert them
to vector files.

Saving data
There are three primary ways to save data to your device:

1. Write formatted data, like JSON, to a file.
2. Use a library or plugin to write simple data to a shared location.
3. Use a SQLite database.

Why save small bits of data?
Note that this simple data saved to a shared location is lost when the user uninstalls
the app.

The shared_preferences plugin
shared_preferences is a Flutter plugin that allows you to save data in a key-value
format so you can easily retrieve it later.

it only supports saving simple properties like strings,
numbers, and boolean values.

Be aware that shared_preferences is not a good fit to store sensitive data. e.g store passwords or access tokens

Running code in the background
Most modern UI toolkits have a main thread that runs the UI code. Any code that takes a long time needs to run on a different thread or process so it doesn’t block the UI. Dart uses a technique similar to JavaScript to achieve this. The language includes these two keywords:
• async
• await
async marks a method or code section as asynchronous. You then use the await keyword inside that method to wait until an asynchronous process finishes in the background.

Dart also has a class named Future , which indicates that the method promises a future result. SharedPreferences.getInstance() returns Future<SharedPreferences> , which you use to retrieve an instance of the SharedPreferences class

Chap: 13
adopting a pattern that programmatically establishes how to track changes and how to broadcast details
about states to the rest of your app is called state management.

Clean Architecture principles by organizing your project so it’s easy to change and understand. You do this by separating your code into separate directories and classes, with each class handling just one task. You
also use interfaces to define contracts that different classes can implement, allowing you to easily swap in different classes or reuse classes in other apps.

UI ---> Biz login ----> (Network & Databases);

the business logic layer should be in charge of deciding how to react to the user’s actions and how to delegate tasks like retrieving and saving data to other classes.

Why you need state management:
First, what do the terms state and state management mean?
State is when a widget is active and stores its data in memory.
The Flutter framework handles some state,
but as mentioned earlier, Flutter is declarative. That means it rebuilds a UI StatefulWidget from memory when the state or data changes or when another part of your app uses it.
State management is, as the name implies, how you manage the state of your widgets and app.

Two state types to consider are ephemeral state, also known as UI state and app state
• Use Ephemeral state when no other component in the widget tree needs to access a widget’s data. Examples include whether a TabBarView tab is selected or FloatingActionButton is pressed.
• Use App state when other parts of your app need to access a widget’s state data.
One example is an image that changes over time, like an icon for the current weather. Another example is information that the user selects on one screen and which should then display on another screen, like when the user adds an item to a shopping cart.

Widget state:
A stateless widget is drawn with the same state it had when it was
created.
A stateful widget preserves its state and uses it to (re)draw itself in the future.

CHECK PG 430 Diagrams

An element tree stores both the widgets themselves and the states of all the stateful widgets in RecipeList:
If the state of a widget updates, the state object also updates and the widget is redrawn with that updated state.
This kind of management handles state only for a specific widget. But what if you want to manage state for your whole app or share state between widgets and screens? You do this using application state.

Application state:
In Flutter, a stateful widget can hold state, which its children can access, and pass data to another screen in its constructor. However, that complicates your code and you have to remember
to pass data objects down the tree. Wouldn’t it be great if
child widgets could easily access their parent data without having to pass in that data?

There are several different ways to achieve that, both with built-in widgets and with third-party packages. You’ll look at built-in widgets first.

Managing state in your app:
Widgets --> Widget Data --> Repository --> (Local Storage & Newtwork Data)

Stateful widgets
StatefulWidget is one of the most basic ways of saving state.

When you create a stateful widget, you call createState() , which stores the state internally in Flutter to reuse when the parent needs to rebuild the widget tree. When the widget is rebuilt, Flutter reuses the existing state.

You use initstate() for one-time work, like initializing text controllers. Then you use setState() to change state,
triggering a rebuild of the widget with the new state.

StatefulWidget is great for maintaining internal state, but not for state outside of the widget.
One way to achieve an architecture that allows sharing state between widgets is to adopt InheritedWidget.

InheritedWidget
InheritedWidget is a built-in class that allows its child widgets to access its data. It’s the basis for a lot of other state management widgets. If you create a class that extends InheritedWidget and give it some data, any child widget can access that data by calling
context.dependOnInheritedWidgetOfExactType<class>() .

An advantage of using InheritedWidget is it’s a built-in widget so you don’t need to worry about using external packages.

A disadvantage of using InheritedWidget is that the value of a recipe can’t change unless you rebuild the whole widget tree because InheritedWidget is immutable.
So, if you want to change the displayed recipe title, you’ll have to rebuild the whole RecipeWidget .

Provider:
Provider is a set of classes that simplifies building a state management solution on top of InheritedWidget.

ChangeNotifier
ChangeNotifier is a class that adds and removes listeners, then notifies those listeners of any changes. You usually extend the class for models so you can send notifications when your model changes.

ChangeNotifierProvider
ChangeNotifierProvider is a widget that wraps a class, implementing ChangeNotifier and uses the child widget for display. When changes are broadcast, the widget rebuilds its tree. The syntax looks like this:

ChangeNotifierProvider(
create: (context) => MyModel(),
child: <widget>,
);

Provider offers a central point to manage state, so that you don’t need to manually update different widgets via setState() every time that state changes.

But what happens if you create a model in that widget each time? That creates a new one! Any work that model did is lost the next time. By using create , Provider saves
that model instead of re-creating it each time.

Consumer
Consumer is a widget that listens for changes in a class that implements ChangeNotifier , then rebuilds the widgets below itself when it finds any. When building your widget tree, try to put a Consumer as deep as possible in the UI hierarchy, so updates don’t recreate the whole widget tree.

Consumer<MyModel>(
builder: (context, model, child) {
return Text('Hello ${model.value}');
}
);

If you only need access to the model and don’t need notifications when the data changes, use Provider.of , like this:

Provider.of<MyModel>(context, listen: false).<method name>

listen: false indicates you don’t want notifications for any updates. This parameter is required to use Provider.of() inside initState() .

FutureProvider
FutureProvider works like other providers and uses the required create parameter that returns a Future.

A Future is handy when a value is not readily available but will be in the future. Examples include calls that request data from the internet or asynchronously read data from a database.

MultiProvider
What if you need more than one provider? You could nest them, but it’d get messy, making them hard to read and maintain.

Instead, use MultiProvider to create a list of providers and a single child:

MultiProvider(
providers: [
Provider<MyModel>(create: (_) => Something()),
Provider<MyDatabase>(create: (_) => SomethingMore()),
],
child: <widget>
);

StreamProvider
works the same way as FutureProvider. Stream providers are handy when data comes in via streams and values change over time like, for example, when you’re monitoring the connectivity of a device.

equatable: ^2.0.3:
Equatable helps with equality checks by providing equals() and toString() as well as hashcode . This allows you to check models for equality in maps and it’s necessary for providers.


CHAP 14: STREAMS
A stream in Dart — sends data events for a
listener to grab.

You can send one data event at a time while other parts of your app listen for those events. Such events can be collections, maps or any other type of data you’ve created.
Streams can send errors in addition to data; you can also stop the stream, if you need to.

Types of streams
Streams are part of Dart, and Flutter inherits them. There are two types of streams in Flutter: single subscription streams and broadcast streams.

A single subscription stream can only be listened to once. It doesn’t start generating events until it has a listener and it stops sending events when the listener stops listening, even if the source of events could still provide more data.

Single subscription streams are useful to download a file or for any single-use
operation. For example, a widget can subscribe to a stream to receive updates about a value, like the progress of a download, and update its UI accordingly.
If you need multiple parts of your app to access the same stream, use a broadcast
stream, instead.

A broadcast stream allows any number of listeners. It fires when its events are ready, whether there are listeners or not.
To create a broadcast stream, you simply call asBroadcastStream() on an existing
single subscription stream.
final broadcastStream =
singleStream.asBroadcastStream();

