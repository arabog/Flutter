/*
Navigation and Routing
In this chapter, we will learn about the three types of navigation 
and routing to implement navigation from the BookListing homepage 
to the BookDetailsPage screen. The BookDetailsPage page only 
displays the book details

SIMPLE BookDetailsPage SCREEN
In this section, you will learn to build a basic secondary page 
widget – BookDetailsPage, which is used as a placeholder to 
understand navigation and routing concepts in Flutter application.

The BookDetailsPage is a StatelessWidget with two children 
widgets: AppBar and Center. The AppBar widget displays the 
book’s title, and the Center widget is assigned to the `body` 
property for the Scaffold widget. This Center widget has a 
child Text widget to display the book’s detailed description.

import 'package:flutter/material.dart';
import 'book.dart';


class BookDetailsPage extends StatelessWidget {
	final BookModel book;

	const BookDetailsPage({Key key, this.book}) : super(key: key);

	@override
	Widget build(BuildContext context) {
		return Scaffold(
			appBar: AppBar(
				title: Text(book.volumeInfo.title),
			),
			
			body: Center(
				child: Text(book.volumeInfo.description),
			),
		);
	}
}

The data structure BookModel was constructed in the chapter 
(Chapter 13: Data Modeling) from the Books API’s JSON response. 
The BookDetailsPage requires the currently selected book item 
information passed along to be able to render its title and description. 
The `book` object of BookModel data type provides the book’s title 
information as `book.volumeInfo.title`, and its description is 
available as `book.volumeInfo.description`. At this point, we 
display only the title and description in the book details page.

NAVIGATOR WIDGET
The Flutter framework implements navigation across multiple 
pages using the Navigator (Navigator class) widget. It’s a widget 
to manage children widgets using a stack discipline. There are 
three different ways to implement navigation in the Flutter 
application.

Direct Navigation: 
The direct navigation is also known as Unnamed Routing. It 
is implemented with the help of MaterialPageRoute
(MaterialPageRoute<T> class).

Static Navigation: 
The static navigation is a type of Named Routing. It is
implemented by assigning a map of routes to MaterialApp 
`routes` (routes property) property. The routes property acts 
like the application’s top-level routing table. The route name 
is pushed using Navigator.pushNamed(...). The routing table 
decides which route will map to what widget.

Dynamic Navigation: 
The dynamic navigation is a type of Named Routing as well. In 
this navigation type, routes are generated by implementing the 
onGenerateRoute (onGenerateRoute property) callback in the
MaterialApp class. It’s a function that provides the routes dynamically.
This routing function is assigned to the onGenerateRoute property
of MaterialApp, as mentioned earlier. The route name is pushed using
Navigator.pushNamed(...) similar to static navigation.

DIRECT NAVIGATION
Direct navigation is also known as unnamed routing. As mentioned 
earlier, it is implemented using MaterialPageRoute. The 
MaterialPageRoutes is pushed directly to the navigator widget stack. 
This approach can contribute to duplicate and boilerplate code across 
multiple pages. This boilerplate code multiplies with growing 
screens/pages. It is challenging to keep track of logic wrapped around 
these routes in a commonplace since it spreads around multiple classes.
Let’s implement this type of navigation in our BooksApp for navigating 
from the BookListing page to BookDetailsPage.


Entry Point
The MaterialApp assigns the BooksListing screen to its home property.

class BooksApp extends StatelessWidget {
	@override
	Widget build(BuildContext context) {
		//Using Direct Navigation (un-named routing)
		return MaterialApp(
			debugShowCheckedModeBanner: false,

			home: BooksListing(),
		);
	}
}


Navigation Implementation
This routing is implemented using Navigator.push() 
(push<T extends Object> method) method. The 
MaterialPageRoute (MaterialPageRoute<T> class) is pushed 
on the Navigator (Navigator class). The Navigator is a widget 
that manages a set of child widgets as a stack. These child 
widgets are pages or screens pushed on the Navigator widget. 
The Navigator widget refers to these children as Route 
(Route class) objects.









*/ 