/*
Preparing Database Using Moor
First, we’ll use Moor to prepare a database to save `themeId` 
and `themeName`. The active theme’s id will be saved in the 
database table. This table will have only one entry at a given 
time. When the theme switches from light to dark, the older 
entry will be deleted, and a newly selected theme’s id will be 
added to this table. I kept it simple on purpose to demonstrate 
how Moor can be integrated in your app.

The `ThemePrefs` class extends `Table`. ThemePrefs table 
contains only two fields: theme _ id to save id for the theme 
and another field themeName for saving name.

class ThemePrefs extends Table {
	IntColumn get themeId => integer() ();

	TextColumn get themeName => text() ();
}

It will generate a table called theme _ prefs for us. The rows 
of that table will be represented by a class called `ThemePref` 
auto generated by `moor _ generator` plugin.

The following part actually prepares the database table. 
This is the class where migration strategy is described. 
It resets the tables, and makes the light theme default in 
case of first launch or upgrade.

@UseMoor(tables: [ThemePrefs])

class MyDatabase extends _$MyDatabase {
	@override
	MigrationStrategy get migration {...}
}

There is one method to activate the theme. It adds the 
current theme’s index/id to the table.

void activateTheme(AppThemes theme) {
	ThemePref pref = 
	ThemePref(themeId: theme.index, themeName: theme.toString());
	
	into(themePrefs).insert(pref);
}

The other method `deactivateTheme(int i)` removes the entry 
from the table for the given `theme _ id`.

void deactivateTheme(int i) =>
(delete(themePrefs)..where((t) => t.themeId.equals(i))).go();

The method `themeIdExists(.)` checks if the entry for given 
`theme _ id` already exists, and returns a boolean.


Stream<bool> themeIdExists(int id) {
	return select(themePrefs)
	.watch()
	.map((prefs) => prefs.any((pref) => pref.themeId == id));
}

The `getActiveTheme()` queries the table and returns the only 
available row. Remember there’s only one row for the active 
theme in the whole table. By the way, this may not be the good 
use of a database to just store one entry. I chose to keep this
way to understand the database integration in a Flutter app.

Future<ThemePref> getActiveTheme() {
	return select(themePrefs).getSingle();
}

Let’s take a look at the database file: themes_pref.dart below:

import 'package:moor/moor.dart';
import '../themes.dart';
part 'theme_prefs.g.dart';

It will generate a table called "theme_prefs" for us. The rows of 
that table will be represented by a class called "ThemePref".

class ThemePrefs extends Table {
	// AppThemes id
	IntColumn get themeId => integer()();
	TextColumn get themeName => text()();
}

// Moor prepares database table
@UseMoor(tables: [ThemePrefs])
class MyDatabase extends _$MyDatabase {
	MyDatabase(QueryExecutor e) : super(e);

	// Bump schemaVersion whenever there's change.
	@override
	int get schemaVersion => 1;

	Keeping it simple reset the database whenever there's an update.
	Add light theme as default theme after first launch and
	@override
	MigrationStrategy get migration {
		return MigrationStrategy(onCreate: (Migrator m) {
			return m.createAll();
		}, 
		
		onUpgrade: (Migrator m, int from, int to) async {
			m.deleteTable(themePrefs.actualTableName);

			m.createAll();
		}, 
		
		beforeOpen: (details) async {
			if (details.wasCreated) {
				await into(themePrefs).insert(ThemePrefsCompanion(
					themeId: const Value(0),

					themeName: Value(AppThemes.light.toString()),
				));
			}
		});
	}

	void activateTheme(AppThemes theme) {
		ThemePref pref =
		ThemePref(themeId: theme.index, themeName: theme.toString());

		into(themePrefs).insert(pref);
	}

	void deactivateTheme(int i) =>
		(delete(themePrefs)..where((t) => t.themeId.equals(i))).go();


	The stream will automatically emit new items whenever the 
	underlying data changes.
	Stream<bool> themeIdExists(int id) {
		return select(themePrefs)
		.watch()
		.map((prefs) => prefs.any((pref) => pref.themeId == id));
	}

	Future<ThemePref> getActiveTheme() {
		return select(themePrefs).getSingle();
	}
}


Please note that this line ‘part 'theme _ prefs.g.dart';’ will show 
an error in the beginning because this file doesn’t exist yet. You’ll 
need to execute following command to generate sqlite bindings:

flutter packages pub run build_runner build--delete-conflicting-outputs

*/ 





//Persisting selected theme using sharedPreference




	
import 'package:moor/moor.dart';
import '../../flutter_themes10/themes.dart';
part 'theme_prefs.g.dart';

// It will generate a table called "theme_prefs" for us. The rows of 
// that table will be represented by a class called "ThemePref".

class ThemePrefs extends Table {
	// AppThemes id
	IntColumn get themeId => integer()();
	TextColumn get themeName => text()();
}


// Moor prepares database table
@UseMoor(tables: [ThemePrefs])
class MyDatabase extends _$MyDatabase {
	MyDatabase(QueryExecutor e) : super(e);

	// Bump schemaVersion whenever there's change.
	@override
	int get schemaVersion => 1;

	// Keeping it simple reset the database whenever there's an update.
	// Add light theme as default theme after first launch and
	@override
	MigrationStrategy get migration {
		return MigrationStrategy(onCreate: (Migrator m) {
			return m.createAll();
		}, 
		
		onUpgrade: (Migrator m, int from, int to) async {
			m.deleteTable(themePrefs.actualTableName);

			m.createAll();
		}, 
		
		beforeOpen: (details) async {
			if (details.wasCreated) {
				await into(themePrefs).insert(ThemePrefsCompanion(
					themeId: const Value(0),

					themeName: Value(AppThemes.light.toString()),
				));
			}
		});
	}

	void activateTheme(AppThemes theme) {
		ThemePref pref =
		ThemePref(themeId: theme.index, themeName: theme.toString());

		into(themePrefs).insert(pref);
	}

	void deactivateTheme(int i) =>
		(delete(themePrefs)..where((t) => t.themeId.equals(i))).go();


	// The stream will automatically emit new items whenever the 
	// underlying data changes.
	Stream<bool> themeIdExists(int id) {
		return select(themePrefs)
		.watch()
		.map((prefs) => prefs.any((pref) => pref.themeId == id));
	}

	Future<ThemePref> getActiveTheme() {
		return select(themePrefs).getSingle();
	}
}



// continue from 175

*/ 